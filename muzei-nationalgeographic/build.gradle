/*
 * Copyright 2014 Maximilian Salomon.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/.
 */

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

dependencies {
   // kotlin
   implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
   implementation 'androidx.core:core-ktx:1.3.2'
   // muzei
   implementation 'com.google.android.apps.muzei:muzei-api:3.4.0'
   // retrofit
   implementation 'com.squareup.retrofit2:retrofit:2.9.0'
   implementation 'com.squareup.retrofit2:converter-gson:2.5.0'
   implementation 'com.squareup.okhttp3:logging-interceptor:4.9.1'
   // misc
   implementation 'android.arch.work:work-runtime-ktx:1.0.1'
   implementation 'androidx.preference:preference-ktx:1.1.1'
   implementation 'com.github.sisyphsu:dateparser:1.0.7'
}

android {
   compileSdkVersion 30
   compileOptions {
      sourceCompatibility JavaVersion.VERSION_1_8
      targetCompatibility JavaVersion.VERSION_1_8
   }
   kotlinOptions {
      jvmTarget = JavaVersion.VERSION_1_8.toString()
   }

   defaultConfig {
      applicationId 'de.msal.muzei.nationalgeographic'
      minSdkVersion 21
      targetSdkVersion 30
      // SemVer
      def major = 2
      def minor = 2
      def patch = 1
      versionCode = (major * 10000) + (minor * 100) + patch
      versionName = "$major ($major.$minor.$patch)"
      //
      vectorDrawables.useSupportLibrary = true
   }

   signingConfigs {
      release {
         /* get the keystore data for signing */
         Properties props = new Properties()
         def propFile = file('../keystore/signing.properties')

         if (propFile.canRead()) {
            props.load(new FileInputStream(propFile))

            if (props != null
                  && props.containsKey('STORE_FILE')
                  && props.containsKey('STORE_PASSWORD')
                  && props.containsKey('KEY_ALIAS')
                  && props.containsKey('KEY_PASSWORD')) {
               android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
               android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
               android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
               android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
            } else {
               android.buildTypes.release.signingConfig = null
               println 'props == null'
            }
         } else {
            android.buildTypes.release.signingConfig = null
            println 'propFile can\'t be read.'
         }
      }
   }

   buildTypes {
      release {
         signingConfig signingConfigs.release
         debuggable false
         minifyEnabled true
         zipAlignEnabled true
         jniDebuggable false
         proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
      }
      debug {
         applicationIdSuffix '.debug'
         versionNameSuffix ' [DEBUG]'
      }
   }

   lintOptions {
      disable 'InvalidPackage'
   }

   android {
      sourceSets {
         main.java.srcDirs += 'src/main/kotlin'
      }
   }

}
